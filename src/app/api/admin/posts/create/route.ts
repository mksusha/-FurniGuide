import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
const transliterate = (text: string) => {
    const map: Record<string, string> = {
        –∞: 'a', –±: 'b', –≤: 'v', –≥: 'g', –¥: 'd',
        –µ: 'e', —ë: 'e', –∂: 'zh', –∑: 'z', –∏: 'i',
        –π: 'y', –∫: 'k', –ª: 'l', –º: 'm', –Ω: 'n',
        –æ: 'o', –ø: 'p', —Ä: 'r', —Å: 's', —Ç: 't',
        —É: 'u', —Ñ: 'f', —Ö: 'h', —Ü: 'ts', —á: 'ch',
        —à: 'sh', —â: 'sch', —ä: '', —ã: 'y', —å: '',
        —ç: 'e', —é: 'yu', —è: 'ya',
    };
    return text.toLowerCase().split('').map(c => map[c] ?? c).join('');
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ slug –¥–ª—è –ø–æ—Å—Ç–∞
async function generateUniqueSlug(baseSlug: string) {
    let slug = baseSlug;
    let counter = 1;
    while (await prisma.post.findUnique({ where: { slug } })) {
        slug = `${baseSlug}-${counter}`;
        counter++;
    }
    return slug;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ slug –¥–ª—è –∞–≤—Ç–æ—Ä–∞
async function generateUniqueAuthorSlug(name: string) {
    const baseSlug = transliterate(name)
        .replace(/\s+/g, '-')
        .replace(/[^a-z0-9\-]/g, '');

    let slug = baseSlug;
    let counter = 1;
    while (await prisma.author.findUnique({ where: { slug } })) {
        slug = `${baseSlug}-${counter}`;
        counter++;
    }
    return slug;
}

export async function POST(req: NextRequest) {
    try {
        const body = await req.json();
        const {
            title,
            slug,
            content,
            categoryId,
            authorId,
            authorName,
            imageUrl // üî• –î–æ–±–∞–≤–∏–ª–∏ imageUrl
        } = body;

        if (!title || !slug || !content || !categoryId) {
            return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
        }

        const category = await prisma.category.findUnique({ where: { id: categoryId } });
        if (!category) {
            return NextResponse.json({ error: "Category not found" }, { status: 400 });
        }

        let resolvedAuthorId: string | null = null;

        if (authorId) {
            const author = await prisma.author.findUnique({ where: { id: authorId } });
            if (!author) {
                return NextResponse.json({ error: "Author not found" }, { status: 400 });
            }
            resolvedAuthorId = author.id;
        } else if (authorName && authorName.trim()) {
            let author = await prisma.author.findFirst({ where: { name: authorName.trim() } });

            if (!author) {
                const uniqueAuthorSlug = await generateUniqueAuthorSlug(authorName);
                author = await prisma.author.create({
                    data: {
                        name: authorName.trim(),
                        slug: uniqueAuthorSlug,
                    },
                });
            }

            resolvedAuthorId = author.id;
        }

        const baseSlug = slug
            .toLowerCase()
            .trim()
            .replace(/\s+/g, '-')
            .replace(/[^a-z0-9\-]/g, '');

        const uniqueSlug = await generateUniqueSlug(baseSlug);

        const post = await prisma.post.create({
            data: {
                title,
                slug: uniqueSlug,
                content,
                categoryId,
                authorId: resolvedAuthorId,
                imageUrl, // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º imageUrl
            },
        });

        return NextResponse.json(post);
    } catch (error) {
        console.error("Error creating post:", error);
        return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
    }
}
